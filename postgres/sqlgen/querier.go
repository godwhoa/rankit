// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlgen

import (
	"context"
)

type Querier interface {
	// Create a new contest
	CreateContest(ctx context.Context, arg CreateContestParams) (*Contest, error)
	// Create a new item
	CreateItem(ctx context.Context, arg CreateItemParams) (*Item, error)
	// Create a new user
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	// Find contest by ID
	GetContestByID(ctx context.Context, id string) (*Contest, error)
	// Get creator id of a contest
	GetContestCreatorID(ctx context.Context, id string) (string, error)
	// Get item ELO rating history
	GetItemEloHistory(ctx context.Context, itemID string) ([]*EloHistory, error)
	// Get an item's current ELO rating
	GetItemEloRating(ctx context.Context, id string) (int, error)
	// Find items by contest ID
	GetItemsByContestID(ctx context.Context, contestID string) ([]*Item, error)
	// Get random items for a contest
	GetRandomItems(ctx context.Context, arg GetRandomItemsParams) ([]*Item, error)
	// Find a user by email
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	// Find a user by ID
	GetUserByID(ctx context.Context, id string) (*User, error)
	// Get ELO rating of winner and loser items as a tuple
	GetWinnerLoserEloRatings(ctx context.Context, arg GetWinnerLoserEloRatingsParams) (*GetWinnerLoserEloRatingsRow, error)
	// Record multiple items' ELO rating histories
	RecordEloHistories(ctx context.Context, arg []RecordEloHistoriesParams) *RecordEloHistoriesBatchResults
	// Record an item's ELO rating history
	RecordEloHistory(ctx context.Context, arg RecordEloHistoryParams) error
	// Record a vote
	RecordVote(ctx context.Context, arg RecordVoteParams) error
	// Update an item's ELO rating
	UpdateItemEloRating(ctx context.Context, arg UpdateItemEloRatingParams) error
	// Update multiple items' ELO ratings
	UpdateItemsEloRatings(ctx context.Context, arg []UpdateItemsEloRatingsParams) *UpdateItemsEloRatingsBatchResults
}

var _ Querier = (*Queries)(nil)
