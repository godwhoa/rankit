// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: batch.go

package sqlgen

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const recordEloHistories = `-- name: RecordEloHistories :batchexec
INSERT INTO elo_history (
    id, item_id, elo_rating, created_at
) VALUES (
    $1, $2, $3, CURRENT_TIMESTAMP AT TIME ZONE 'UTC'
)
`

type RecordEloHistoriesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type RecordEloHistoriesParams struct {
	ID        string `json:"id"`
	ItemID    string `json:"item_id"`
	EloRating int    `json:"elo_rating"`
}

// Record multiple items' ELO rating histories
func (q *Queries) RecordEloHistories(ctx context.Context, arg []RecordEloHistoriesParams) *RecordEloHistoriesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.ItemID,
			a.EloRating,
		}
		batch.Queue(recordEloHistories, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &RecordEloHistoriesBatchResults{br, len(arg), false}
}

func (b *RecordEloHistoriesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *RecordEloHistoriesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const updateItemsEloRatings = `-- name: UpdateItemsEloRatings :batchexec
UPDATE items SET elo_rating = $2, updated_at = CURRENT_TIMESTAMP AT TIME ZONE 'UTC' WHERE id = $1
`

type UpdateItemsEloRatingsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateItemsEloRatingsParams struct {
	ID        string `json:"id"`
	EloRating int    `json:"elo_rating"`
}

// Update multiple items' ELO ratings
func (q *Queries) UpdateItemsEloRatings(ctx context.Context, arg []UpdateItemsEloRatingsParams) *UpdateItemsEloRatingsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.EloRating,
		}
		batch.Queue(updateItemsEloRatings, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateItemsEloRatingsBatchResults{br, len(arg), false}
}

func (b *UpdateItemsEloRatingsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateItemsEloRatingsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
